AWSTemplateFormatVersion: '2010-09-09'
Description: "Creates a VPC with 2 subnets, a KMS key, Security group for an Amazon Aurora MySQL DB Cluster with DB Cluster and DB Parameter groups"

Resources:

   # Create default tenancy VPC with DNS hostname and resolution support using a /24 subnet mask
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  # Create Private subnet in 1st available AZ with the first /26 subnet mask of the VPC CIDR
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 0
        - Fn::Cidr:
            - !GetAtt VPC.CidrBlock
            - 2
            - 6
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC

  # Create Private subnet in 2nd available AZ with the second /26 subnet mask of the VPC CIDR
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 1
        - Fn::Cidr:
            - !GetAtt VPC.CidrBlock
            - 2
            - 6
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC

  # Create a DB Subnet group using the created subnets from above
  DBSubnetGroup:
    Properties:
      DBSubnetGroupDescription: "Subnets available for the Amazon Aurora database cluster"
      SubnetIds:
       - !Ref Subnet1
       - !Ref Subnet2
    Type: "AWS::RDS::DBSubnetGroup"

  # Create a Security Group for the RDS database to allow inbound traffic on the assigned DB port from the DBAccess CIDR specified
  RDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow access to database port"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: '-1'
          ToPort: -1
          Description: Allows all outbound traffic
      SecurityGroupIngress:
        -
          CidrIp: 10.0.0.0/24
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
          Description: Access from the DBAccessCIDR specified
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub RDSSecurityGroup-${AWS::StackName}

  # Create a Security Group ingress rule for and attach it to the "RDSSecurityGroup"
  RDSSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt 'RDSSecurityGroup.GroupId'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref RDSSecurityGroup
      Description: 'Self Reference'

  # Create a KMS key to be used with the RDS Database Cluster, along with a key policy for Root access
  EncryptionKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      Description: !Join [ "- ", [ "KMS Key for Cloudformation Stack ", !Ref AWS::StackName ] ]
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Ref AWS::StackName
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
          - Sid: Enable RDS and CloudWatch Service Permissions
            Effect: Allow
            Principal:
              Service:
                - 'cloudwatch.amazonaws.com'
            Action:
              - 'kms:GenerateDataKey*'
              - 'kms:Decrypt'
            Resource: '*'

  # Create an Alias for the Encryption key that is used with the RDS DBCluster
  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref EncryptionKey

  # Create a DBCluster Parameter Group, that sets the Aurora DB engine and Time zone to UTC
  AMSDBCPG:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Join [ "- ", [ "Aurora MySQL Cluster Parameter Group for Cloudformation Stack ", !Ref AWS::StackName ] ]
      Family: aurora-mysql8.0
      Parameters:
        time_zone: UTC

  # Create a DB Parameter Group, that sets the Aurora DB engine and query parameters
  AMSDBPG:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Join [ "- ", [ "Aurora MySQL Database Instance Parameter Group for Cloudformation Stack ", !Ref AWS::StackName ] ]
      Family: aurora-mysql8.0
      Parameters:
        slow_query_log: 1
        long_query_time: 5
        log_output: 'FILE'
        innodb_print_all_deadlocks: 1

  # Create aN Aurora DB Cluster, with a deletion and update policy of "Snapshot". Along with the needed parameters to use the KMS Key, Security Groups and VPC, as well as Secret Manager for the DB user name and password. Includes IAM Authenication mapping
  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      BackupRetentionPeriod: 35
      BacktrackWindow: 259200
      DatabaseName: 'sampledb'
      DBClusterIdentifier: !Sub auroradb-${AWS::StackName}
      DBClusterParameterGroupName: !Ref AMSDBCPG
      DBSubnetGroupName: !Ref DBSubnetGroup
      EnableIAMDatabaseAuthentication: true
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.04.0
      KmsKeyId: !Ref EncryptionKey
      MasterUsername: 'admin'
      ManageMasterUserPassword: true
      MasterUserSecret:
        KmsKeyId: !Ref EncryptionKey
      Port: 3306
      StorageEncrypted: true
      StorageType: aurora
      VpcSecurityGroupIds:
         - !Ref RDSSecurityGroup

  # Create a DB instance for the DB Cluster, that uses a "db.r6g.2xlarge" EC2 instance
  DBInst1:
    Type: AWS::RDS::DBInstance
    Properties:
      AutoMinorVersionUpgrade: false
      DBClusterIdentifier: !Ref AuroraDBCluster
      DBInstanceClass: 'db.r6g.2xlarge'
      DBParameterGroupName: !Ref AMSDBPG
      Engine: aurora-mysql

  # Create a second DB instance for the DB Cluster, that uses a "db.r6g.2xlarge" EC2 instance
  DBInst2:
    Type: AWS::RDS::DBInstance
    Properties:
      AutoMinorVersionUpgrade: false
      DBClusterIdentifier: !Ref AuroraDBCluster
      DBInstanceClass: 'db.r6g.2xlarge'
      DBParameterGroupName: !Ref AMSDBPG
      Engine: aurora-mysql

Outputs:
  # Create an output for the DataBase cluster name
  DBName:
    Description: "Amazon Aurora database cluster name"
    Value: !Ref AuroraDBCluster

  # Create an output for the DataBase MasterUser Secret ARN
  MasterUserSecret:
    Description: "Master Credentials ARN"
    Value: !Sub "${AuroraDBCluster.MasterUserSecret.SecretArn}"

  # Create an output for the DataBase Endpoint Address
  RDSEndPointAddress:
    Description: "Amazon Aurora write endpoint"
    Value: !Sub "${AuroraDBCluster.Endpoint.Address}"

  # Create an output for the DataBase Read Endpoint Address
  RDSReadEndPointAddress:
    Description: "Amazon Aurora read endpoint"
    Value: !Sub "${AuroraDBCluster.ReadEndpoint.Address}"

  # Create an output for the DataBase Endpoint Port
  RDSEndPointPort:
    Description: "Amazon Aurora port"
    Value: !Sub "${AuroraDBCluster.Endpoint.Port}"

  # Create an output for the DataBase write Endpoint Address
  RDSEndPoints:
    Description: "Full Amazon Aurora write endpoint"
    Value:  !Sub "${AuroraDBCluster.Endpoint.Address}:${AuroraDBCluster.Endpoint.Port}/mysql"

  # Create an output for the DataBase Encryption Key Alias
  RDSEncryptionKey:
    Description: "The alias of the encryption key created for RDS"
    Value: !Ref EncryptionKeyAlias